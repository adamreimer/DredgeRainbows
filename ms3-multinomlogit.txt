model { 
    # -------------------------------------------------
    # Parameters:
    # phiA: survival probability at site A
    # phiB: survival probability at site B
    # phiC: survival probability at site C
    # psiAB: movement probability from site A to site B
    # psiAC: movement probability from site A to site C
    # psiBA: movement probability from site B to site A
    # psiBC: movement probability from site B to site C
    # psiCA: movement probability from site C to site A
    # psiCB: movement probability from site C to site B
    # pA: recapture probability at site A
    # pB: recapture probability at site B
    # pC: recapture probability at site C 
    # -------------------------------------------------
    # States (S):
    # 1 alive at A
    # 2 alive at B
    # 3 alive at C
    # 4 dead
    # Observations (O):
    # 1 seen at A 
    # 2 seen at B
    # 3 seen at C
    # 4 not seen
    # -------------------------------------------------
    
    # Priors and constraints
    # Survival and recapture: uniform
    phiA ~ dunif(0, 1)
    phiB ~ dunif(0, 1)
    phiC ~ dunif(0, 1)
    pA ~ dunif(0, 1)
    pB ~ dunif(0, 1)
    pC ~ dunif(0, 1)
    
    # Transitions: multinomial logit
    # Normal priors on logit of all but one transition probas
    for (i in 1:2){
		lpsiA[i] ~ dnorm(0, 0.001)
		lpsiB[i] ~ dnorm(0, 0.001)
		lpsiC[i] ~ dnorm(0, 0.001)
    }
    # Constrain the transitions such that their sum is < 1
    for (i in 1:2){
		psiA[i] <- exp(lpsiA[i]) / (1 + exp(lpsiA[1]) + exp(lpsiA[2]))
		psiB[i] <- exp(lpsiB[i]) / (1 + exp(lpsiB[1]) + exp(lpsiB[2]))
		psiC[i] <- exp(lpsiC[i]) / (1 + exp(lpsiC[1]) + exp(lpsiC[2]))
    }
    # Calculate the last transition probability
    psiA[3] <- 1-psiA[1]-psiA[2]
    psiB[3] <- 1-psiB[1]-psiB[2]
    psiC[3] <- 1-psiC[1]-psiC[2]
    
    # Define state-transition and observation matrices 	
    for (i in 1:nind){
    # Define probabilities of state S(t+1) given S(t)
		for (t in f[i]:(n.occasions-1)){
			ps[1,i,t,1] <- phiA * psiA[1]
			ps[1,i,t,2] <- phiA * psiA[2]
			ps[1,i,t,3] <- phiA * psiA[3]
			ps[1,i,t,4] <- 1-phiA
			ps[2,i,t,1] <- phiB * psiB[1]
			ps[2,i,t,2] <- phiB * psiB[2]
			ps[2,i,t,3] <- phiB * psiB[3]
			ps[2,i,t,4] <- 1-phiB
			ps[3,i,t,1] <- phiC * psiC[1]
			ps[3,i,t,2] <- phiC * psiC[2]
			ps[3,i,t,3] <- phiC * psiC[3]
			ps[3,i,t,4] <- 1-phiC
			ps[4,i,t,1] <- 0
			ps[4,i,t,2] <- 0
			ps[4,i,t,3] <- 0
			ps[4,i,t,4] <- 1
			
			# Define probabilities of O(t) given S(t)
			po[1,i,t,1] <- pA
			po[1,i,t,2] <- 0
			po[1,i,t,3] <- 0
			po[1,i,t,4] <- 1-pA
			po[2,i,t,1] <- 0
			po[2,i,t,2] <- pB
			po[2,i,t,3] <- 0
			po[2,i,t,4] <- 1-pB
			po[3,i,t,1] <- 0
			po[3,i,t,2] <- 0
			po[3,i,t,3] <- pC
			po[3,i,t,4] <- 1-pC
			po[4,i,t,1] <- 0
			po[4,i,t,2] <- 0
			po[4,i,t,3] <- 0
			po[4,i,t,4] <- 1
		} #t
    } #i
    
    # Likelihood 
    for (i in 1:nind){
		# Define latent state at first capture   
		z[i,f[i]] <- y[i,f[i]]
		for (t in (f[i]+1):n.occasions){
			# State process: draw S(t) given S(t-1)
			z[i,t] ~ dcat(ps[z[i,t-1], i, t-1,])
			# Observation process: draw O(t) given S(t)
			y[i,t] ~ dcat(po[z[i,t], i, t-1,])
		} #t
    } #i
}
    